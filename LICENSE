
#### 2. `src/data_preprocessing.py` (More Realistic Data)
```python
import pandas as pd
import numpy as np

def generate_realistic_data(n_samples=5000):
    """Generate realistic SVC sensor data with patterns and noise."""
    time = pd.date_range(start='2025-01-01', periods=n_samples, freq='1min')
    # Simulate voltage with daily cycles and random noise
    voltage = 230 + 10 * np.sin(np.linspace(0, 24 * 2 * np.pi, n_samples)) + np.random.normal(0, 2, n_samples)
    # Current with slight correlation to voltage
    current = 50 + 0.1 * voltage + np.random.normal(0, 1, n_samples)
    # Temperature influenced by power and environment
    temperature = 35 + 0.0001 * (voltage * current) + np.sin(np.linspace(0, 12 * np.pi, n_samples)) + np.random.normal(0, 0.5, n_samples)
    # Power calculation
    power = voltage * current
    # Failure condition: extreme values or random faults
    failure = ((voltage < 220) | (temperature > 40) | (power > 12000) | (np.random.random(n_samples) < 0.02)).astype(int)
    
    df = pd.DataFrame({
        'timestamp': time,
        'voltage': voltage,
        'current': current,
        'temperature': temperature,
        'power': power,
        'failure': failure
    })
    df.to_csv('data/sensor_data.csv', index=False)
    return df

def load_and_preprocess_data(file_path='data/sensor_data.csv', sequence_length=10):
    """Load and preprocess data for LSTM."""
    try:
        df = pd.read_csv(file_path)
    except FileNotFoundError:
        print("Generating realistic data...")
        df = generate_realistic_data()
    
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df.fillna(df.mean(), inplace=True)
    
    # Prepare sequences for LSTM
    X, y = [], []
    features = ['voltage', 'current', 'temperature', 'power']
    for i in range(len(df) - sequence_length):
        X.append(df[features].iloc[i:i+sequence_length].values)
        y.append(df['failure'].iloc[i+sequence_length])
    
    return np.array(X), np.array(y)

if __name__ == "__main__":
    X, y = load_and_preprocess_data()
    print("Shape of X (sequences):", X.shape)
    print("Shape of y (targets):", y.shape)
